# 我想大部分人都知道，通常一个程序员会具有的美德。当然了，有三种：懒惰、暴躁、傲慢。
# 一个人写的烂软件将会给另一个人带来一份全职工作。
# 一鼓作气，考研是一种忍耐！！！

'''·字符串
      ·在Python中字符串是基本数据类型，是一个不可变的字符序列

   ·什么叫字符串驻留机制呢?
      ·仅保留一份相同且不可变字符串的方法，不同的值被存放在字符串的驻留池中，Python的驻留机制对相同的字符串只保留一份拷贝，

      ·后续创建相同字符串时，不会开辟新空间，而是把该字符串的地址赋给新创建的变量

字符串的驻留机制
    ·驻留机制的几种情况(交互模式)
        ·字符串的长度为0或1时
        ·符合标识符的字符串
        ·字符串只在编译时进行驻留，而非运行时
        ·[-5,256]之间的整数数字
    ·sys中的intern方法强制2个字符串指向同一个对象
    ·Pycharm对字符串进行了优化处理
'''



a='Python'
b="Python"
c='''Python'''
print(a,id(a))
print(b,id(b))
print(c,id(c))
'''
python的引用计数机制，并不是对所有的数字，字符串，它只对“[0-9] [a-z] [A-Z]和"_"(下划线)”有效，
当字符串中由其他字符比如“！ @ # ￥ % -”时字符驻留机制是不起作用的。，在Pycharm中对字符串做了优化，所以在Pycharm中为Ture

'''
s1=''
s2=''
print(s1 is s2)

s1='%'
s2='%'
print(s1 is s2)

s1='abc%'
print(id(s1))
s2='abc%'
print(id(s2))
#s1和s2的id是不一样的，在Pycharm中对字符串做了优化，所以在Pycharm中一样
print(s1==s2)
print(s1 is s2)


#字符串只在编译时进行驻留，而非运行时 -- a和b都是已经成为了abc，而join是运行过程中才成为abc，因此a==b!=c
a='abc'
b='a'+'bc'
c=''.join(['ab','c'])
print(a==b)
print(b==c)

#字符串的驻留机制 -- [-5,256]之间的整数数字
a=-5
b=-5
print(a is b)  #Ture

a=-6
b=-6
print(a is b) #False


'''
·字符串驻留机制的优缺点
    ·当需要值相同的字符串时，可以直接从字符串池里拿来使用，避免频繁的创建和销毁，提升效率和节约内存，因此拼接字符串和修改字符串是会比较影响性能的。
    ·在需要进行字符串拼接时建议使用 str类型的join方法，而非+因为ioin()方法是先计算出所有字符中的长度，然后再拷贝，只new一次对象，效率要比"+“效率高
'''